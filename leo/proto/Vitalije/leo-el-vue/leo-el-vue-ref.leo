<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="vitalije.20180208154540.1"><vh>README FIRST!!!</vh></v>
<v t="vitalije.20180208155138.1"><vh>@clean src/renderer/components/LeoEditor.vue</vh>
<v t="vitalije.20180208155254.1"><vh>template</vh></v>
<v t="vitalije.20180208155259.1"><vh>script</vh>
<v t="vitalije.20180209130332.1"><vh>imports</vh></v>
<v t="vitalije.20180209130310.1"><vh>export</vh>
<v t="vitalije.20180208201410.1"><vh>data</vh>
<v t="vitalije.20180208201446.1"><vh>themes</vh></v>
</v>
<v t="vitalije.20180208201416.1"><vh>computed</vh></v>
<v t="vitalije.20180208201424.1"><vh>methods</vh></v>
<v t="vitalije.20180208201429.1"><vh>mounted</vh></v>
</v>
</v>
<v t="vitalije.20180208155304.1"><vh>style</vh></v>
</v>
<v t="vitalije.20180208210204.1"><vh>@clean src/renderer/leodata.coffee</vh>
<v t="vitalije.20180208211609.1"><vh>get_bodies</vh></v>
<v t="vitalije.20180208211614.1"><vh>get_heads</vh></v>
<v t="vitalije.20180208214043.1"><vh>get_children</vh></v>
<v t="vitalije.20180208222827.1"><vh>get_levels</vh></v>
<v t="vitalije.20180208213711.1"><vh>nonClonedNodes</vh></v>
<v t="vitalije.20180208211855.1"><vh>loadfile</vh></v>
<v t="vitalije.20180208214737.1"><vh>get_indexes</vh></v>
<v t="vitalije.20180208230944.1"><vh>get_parents</vh></v>
<v t="vitalije.20180209083523.1"><vh>get_parent_gnxes</vh></v>
<v t="vitalije.20180209093557.1"><vh>computeIcon</vh></v>
<v t="vitalije.20180209093605.1"><vh>getBody</vh></v>
<v t="vitalije.20180209091521.1"><vh>treeItemData</vh></v>
<v t="vitalije.20180209132234.1"><vh>language</vh></v>
<v t="vitalije.20180209132238.1"><vh>updateBody</vh></v>
<v t="vitalije.20180209132245.1"><vh>getData</vh></v>
</v>
<v t="vitalije.20180209084406.1"><vh>@clean src/renderer/leodraw.coffee</vh>
<v t="vitalije.20180209094521.1"><vh>allParentIndexes</vh></v>
<v t="vitalije.20180209100020.1"><vh>drawTree</vh></v>
<v t="vitalije.20180209152240.1"><vh>drawTree_visible</vh></v>
<v t="vitalije.20180209090023.1"><vh>drawIcon</vh></v>
<v t="vitalije.20180209090713.1"><vh>drawPlusMinus</vh></v>
<v t="vitalije.20180209091505.1"><vh>drawTreeItem</vh></v>
<v t="vitalije.20180209174419.1"><vh>empty</vh></v>
</v>
<v t="vitalije.20180209141906.1"><vh>@clean src/renderer/store/modules/leostore.coffee</vh>
<v t="vitalije.20180209180701.1"><vh>state</vh></v>
<v t="vitalije.20180209180738.1"><vh>mutations</vh>
<v t="vitalije.20180209180825.1"><vh>LOAD_LEO_FILE</vh></v>
<v t="vitalije.20180209180830.1"><vh>SELECT_INDEX</vh></v>
<v t="vitalije.20180209180833.1"><vh>TOGGLE_NODE</vh></v>
<v t="vitalije.20180209180837.1"><vh>TOGGLE_MARKED_NODE</vh></v>
<v t="vitalije.20180209180841.1"><vh>SET_BODY</vh></v>
</v>
<v t="vitalije.20180209180800.1"><vh>actions</vh></v>
</v>
<v t="vitalije.20180208155118.1"><vh>boilerplate code bellow</vh>
<v t="vitalije.20180207163515.1"><vh>@clean README.md</vh></v>
<v t="vitalije.20180207164526.1"><vh>@clean .electron-vue/build.js</vh></v>
<v t="vitalije.20180207164526.2"><vh>@clean .electron-vue/dev-client.js</vh></v>
<v t="vitalije.20180207164526.3"><vh>@clean .electron-vue/dev-runner.js</vh></v>
<v t="vitalije.20180207164526.4"><vh>@clean .electron-vue/webpack.main.config.js</vh></v>
<v t="vitalije.20180207164526.5"><vh>@clean .electron-vue/webpack.renderer.config.js</vh></v>
<v t="vitalije.20180207164526.6"><vh>@clean .electron-vue/webpack.web.config.js</vh></v>
<v t="vitalije.20180207163515.2"><vh>@clean appveyor.yml</vh></v>
<v t="vitalije.20180207163515.3"><vh>@clean package.json</vh></v>
<v t="vitalije.20180207163515.4"><vh>@clean src/index.ejs</vh></v>
<v t="vitalije.20180207163515.5"><vh>@clean src/main/index.dev.js</vh></v>
<v t="vitalije.20180207163515.6"><vh>@clean src/main/index.js</vh></v>
<v t="vitalije.20180207163515.7"><vh>@clean src/renderer/App.vue</vh></v>
<v t="vitalije.20180207163515.8"><vh>@clean src/renderer/components/LandingPage.vue</vh></v>
<v t="vitalije.20180207163515.9"><vh>@clean src/renderer/components/LandingPage/SystemInformation.vue</vh></v>
<v t="vitalije.20180207163515.10"><vh>@clean src/renderer/main.js</vh></v>
<v t="vitalije.20180207163515.11"><vh>@clean src/renderer/router/index.js</vh></v>
<v t="vitalije.20180207163515.12"><vh>@clean src/renderer/store/index.js</vh></v>
<v t="vitalije.20180207163515.13"><vh>@clean src/renderer/store/modules/Counter.js</vh></v>
<v t="vitalije.20180207163515.14"><vh>@clean src/renderer/store/modules/index.js</vh></v>
<v t="vitalije.20180207163515.15"><vh>@clean test/e2e/index.js</vh></v>
<v t="vitalije.20180207163515.16"><vh>@clean test/e2e/specs/Launch.spec.js</vh></v>
<v t="vitalije.20180207163515.17"><vh>@clean test/e2e/utils.js</vh></v>
<v t="vitalije.20180207163515.18"><vh>@clean test/unit/index.js</vh></v>
<v t="vitalije.20180207163515.19"><vh>@clean test/unit/karma.conf.js</vh></v>
<v t="vitalije.20180207163515.20"><vh>@clean test/unit/specs/LandingPage.spec.js</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="vitalije.20180207163515.1"># leo-el-vue

&gt; An electron-vue project

#### Build Setup

``` bash
# install dependencies
npm install

# serve with hot reload at localhost:9080
npm run dev

# build electron application for production
npm run build

# run unit &amp; end-to-end tests
npm test


```

---

This project was generated with [electron-vue](https://github.com/SimulatedGREG/electron-vue)@[1c165f7](https://github.com/SimulatedGREG/electron-vue/tree/1c165f7c5e56edaf48be0fbb70838a1af26bb015) using [vue-cli](https://github.com/vuejs/vue-cli). Documentation about the original structure can be found [here](https://simulatedgreg.gitbooks.io/electron-vue/content/index.html).
</t>
<t tx="vitalije.20180207163515.10">import Vue from 'vue'
import axios from 'axios'

import App from './App'
import router from './router'
import store from './store'


if (!process.env.IS_WEB) Vue.use(require('vue-electron'))
Vue.http = Vue.prototype.$http = axios
Vue.config.productionTip = false

/* eslint-disable no-new */
window.vueInst = new Vue({
  components: { App },
  router,
  store,
  template: '&lt;App/&gt;'
}).$mount('#app')
</t>
<t tx="vitalije.20180207163515.11">import Vue from 'vue'
import Router from 'vue-router'

Vue.use(Router)

export default new Router({
  routes: [
    {
      path: '/',
      name: 'leo-editor',
      component: require('@/components/LeoEditor').default
    },
    {
      path: '/landing-page',
      name: 'landing-page',
      component: require('@/components/LandingPage').default
    },
    {
      path: '*',
      redirect: '/'
    }
  ]
})
</t>
<t tx="vitalije.20180207163515.12">import Vue from 'vue'
import Vuex from 'vuex'

import modules from './modules'

Vue.use(Vuex)

export default new Vuex.Store({
  modules,
  strict: process.env.NODE_ENV !== 'production'
})
</t>
<t tx="vitalije.20180207163515.13">const state = {
  main: 0
}

const mutations = {
  DECREMENT_MAIN_COUNTER (state) {
    state.main--
  },
  INCREMENT_MAIN_COUNTER (state) {
    state.main++
  }
}

const actions = {
  someAsyncTask ({ commit }) {
    // do something async
    commit('INCREMENT_MAIN_COUNTER')
  }
}

export default {
  state,
  mutations,
  actions
}
</t>
<t tx="vitalije.20180207163515.14">/**
 * The file enables `@/store/index.js` to import all vuex modules
 * in a one-shot manner. There should not be any reason to edit this file.
 */

const files = require.context('.', false, /\.(js|coffee)$/)
const modules = {}

files.keys().forEach(key =&gt; {
  if (key === './index.js') return
  modules[key.replace(/(\.\/|\.js|store\.coffee)/g, '')] = files(key).default
})

export default modules
</t>
<t tx="vitalije.20180207163515.15">'use strict'

// Set BABEL_ENV to use proper env config
process.env.BABEL_ENV = 'test'

// Enable use of ES6+ on required files
require('babel-register')({
  ignore: /node_modules/
})

// Attach Chai APIs to global scope
const { expect, should, assert } = require('chai')
global.expect = expect
global.should = should
global.assert = assert

// Require all JS files in `./specs` for Mocha to consume
require('require-dir')('./specs')
</t>
<t tx="vitalije.20180207163515.16">import utils from '../utils'

describe('Launch', function () {
  beforeEach(utils.beforeEach)
  afterEach(utils.afterEach)

  it('shows the proper application title', function () {
    return this.app.client.getTitle()
      .then(title =&gt; {
        expect(title).to.equal('leo-el-vue')
      })
  })
})
</t>
<t tx="vitalije.20180207163515.17">import electron from 'electron'
import { Application } from 'spectron'

export default {
  afterEach () {
    this.timeout(10000)

    if (this.app &amp;&amp; this.app.isRunning()) {
      return this.app.stop()
    }
  },
  beforeEach () {
    this.timeout(10000)
    this.app = new Application({
      path: electron,
      args: ['dist/electron/main.js'],
      startTimeout: 10000,
      waitTimeout: 10000
    })

    return this.app.start()
  }
}
</t>
<t tx="vitalije.20180207163515.18">import Vue from 'vue'
Vue.config.devtools = false
Vue.config.productionTip = false

// require all test files (files that ends with .spec.js)
const testsContext = require.context('./specs', true, /\.spec$/)
testsContext.keys().forEach(testsContext)

// require all src files except main.js for coverage.
// you can also change this to match only the subset of files that
// you want coverage for.
const srcContext = require.context('../../src/renderer', true, /^\.\/(?!main(\.js)?$)/)
srcContext.keys().forEach(srcContext)
</t>
<t tx="vitalije.20180207163515.19">'use strict'

const path = require('path')
const merge = require('webpack-merge')
const webpack = require('webpack')

const baseConfig = require('../../.electron-vue/webpack.renderer.config')
const projectRoot = path.resolve(__dirname, '../../src/renderer')

// Set BABEL_ENV to use proper preset config
process.env.BABEL_ENV = 'test'

let webpackConfig = merge(baseConfig, {
  devtool: '#inline-source-map',
  plugins: [
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': '"testing"'
    })
  ]
})

// don't treat dependencies as externals
delete webpackConfig.entry
delete webpackConfig.externals
delete webpackConfig.output.libraryTarget

// apply vue option to apply isparta-loader on js
webpackConfig.module.rules
  .find(rule =&gt; rule.use.loader === 'vue-loader').use.options.loaders.js = 'babel-loader'

module.exports = config =&gt; {
  config.set({
    browsers: ['visibleElectron'],
    client: {
      useIframe: false
    },
    coverageReporter: {
      dir: './coverage',
      reporters: [
        { type: 'lcov', subdir: '.' },
        { type: 'text-summary' }
      ]
    },
    customLaunchers: {
      'visibleElectron': {
        base: 'Electron',
        flags: ['--show']
      }
    },
    frameworks: ['mocha', 'chai'],
    files: ['./index.js'],
    preprocessors: {
      './index.js': ['webpack', 'sourcemap']
    },
    reporters: ['spec', 'coverage'],
    singleRun: true,
    webpack: webpackConfig,
    webpackMiddleware: {
      noInfo: true
    }
  })
}
</t>
<t tx="vitalije.20180207163515.2"># Commented sections below can be used to run tests on the CI server
# https://simulatedgreg.gitbooks.io/electron-vue/content/en/testing.html#on-the-subject-of-ci-testing
version: 0.1.{build}

branches:
  only:
    - master

image: Visual Studio 2017
platform:
  - x64

cache:
  - node_modules
  - '%APPDATA%\npm-cache'
  - '%USERPROFILE%\.electron'
  - '%USERPROFILE%\AppData\Local\Yarn\cache'

init:
  - git config --global core.autocrlf input

install:
  - ps: Install-Product node 8 x64
  - choco install yarn --ignore-dependencies
  - git reset --hard HEAD
  - yarn
  - node --version

build_script:
  #- yarn test
  - yarn build

test: off
</t>
<t tx="vitalije.20180207163515.20">import Vue from 'vue'
import LandingPage from '@/components/LandingPage'

describe('LandingPage.vue', () =&gt; {
  it('should render correct contents', () =&gt; {
    const vm = new Vue({
      el: document.createElement('div'),
      render: h =&gt; h(LandingPage)
    }).$mount()

    expect(vm.$el.querySelector('.title').textContent).to.contain('Welcome to your new project!')
  })
})
</t>
<t tx="vitalije.20180207163515.3">{
  "name": "leo-el-vue",
  "version": "0.0.0",
  "author": "vitalije &lt;vitalije@kviziracija.net&gt;",
  "description": "An electron-vue project",
  "license": null,
  "main": "./dist/electron/main.js",
  "scripts": {
    "build": "node .electron-vue/build.js &amp;&amp; electron-builder",
    "build:dir": "node .electron-vue/build.js &amp;&amp; electron-builder --dir",
    "build:clean": "cross-env BUILD_TARGET=clean node .electron-vue/build.js",
    "build:web": "cross-env BUILD_TARGET=web node .electron-vue/build.js",
    "dev": "node .electron-vue/dev-runner.js",
    "e2e": "npm run pack &amp;&amp; mocha test/e2e",
    "pack": "npm run pack:main &amp;&amp; npm run pack:renderer",
    "pack:main": "cross-env NODE_ENV=production webpack --progress --colors --config .electron-vue/webpack.main.config.js",
    "pack:renderer": "cross-env NODE_ENV=production webpack --progress --colors --config .electron-vue/webpack.renderer.config.js",
    "test": "npm run unit &amp;&amp; npm run e2e",
    "unit": "karma start test/unit/karma.conf.js",
    "postinstall": ""
  },
  "build": {
    "productName": "leo-el-vue",
    "appId": "net.computingart.electron-vue",
    "directories": {
      "output": "build"
    },
    "files": [
      "dist/electron/**/*"
    ],
    "dmg": {
      "contents": [
        {
          "x": 410,
          "y": 150,
          "type": "link",
          "path": "/Applications"
        },
        {
          "x": 130,
          "y": 150,
          "type": "file"
        }
      ]
    },
    "mac": {
      "icon": "build/icons/icon.icns"
    },
    "win": {
      "icon": "build/icons/icon.ico"
    },
    "linux": {
      "icon": "build/icons"
    }
  },
  "dependencies": {
    "axios": "^0.16.1",
    "vue": "^2.3.3",
    "vue-codemirror-component": "^1.1.1",
    "vue-electron": "^1.0.6",
    "vue-router": "^2.5.3",
    "vuex": "^2.3.1"
  },
  "devDependencies": {
    "babel-core": "^6.25.0",
    "babel-loader": "^7.1.1",
    "babel-minify": "^0.3.0",
    "babel-plugin-istanbul": "^4.1.1",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-preset-env": "^1.6.0",
    "babel-preset-minify": "^0.3.0",
    "babel-preset-stage-0": "^6.24.1",
    "babel-register": "^6.24.1",
    "babili-webpack-plugin": "^0.1.2",
    "cfonts": "^1.1.3",
    "chai": "^4.0.0",
    "chalk": "^2.1.0",
    "coffee-loader": "^0.9.0",
    "coffeescript": "^2.2.1",
    "copy-webpack-plugin": "^4.0.1",
    "cross-env": "^5.0.5",
    "css-loader": "^0.28.4",
    "del": "^3.0.0",
    "devtron": "^1.4.0",
    "electron": "^1.7.5",
    "electron-builder": "^19.19.1",
    "electron-debug": "^1.4.0",
    "electron-devtools-installer": "^2.2.0",
    "extract-text-webpack-plugin": "^3.0.0",
    "file-loader": "^0.11.2",
    "html-webpack-plugin": "^2.30.1",
    "inject-loader": "^3.0.0",
    "karma": "^1.3.0",
    "karma-chai": "^0.1.0",
    "karma-coverage": "^1.1.1",
    "karma-electron": "^5.1.1",
    "karma-mocha": "^1.2.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-spec-reporter": "^0.0.31",
    "karma-webpack": "^2.0.1",
    "mocha": "^3.0.2",
    "multispinner": "^0.2.1",
    "node-loader": "^0.6.0",
    "pug": "^2.0.0-rc.4",
    "require-dir": "^0.3.0",
    "spectron": "^3.7.1",
    "style-loader": "^0.18.2",
    "url-loader": "^0.5.9",
    "vue-html-loader": "^1.2.4",
    "vue-loader": "^13.0.5",
    "vue-style-loader": "^3.0.1",
    "vue-template-compiler": "^2.4.2",
    "webpack": "^3.5.2",
    "webpack-dev-server": "^2.7.1",
    "webpack-hot-middleware": "^2.18.2",
    "webpack-merge": "^4.1.0"
  }
}
</t>
<t tx="vitalije.20180207163515.4">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;leo-el-vue&lt;/title&gt;
    &lt;% if (htmlWebpackPlugin.options.nodeModules) { %&gt;
      &lt;!-- Add `node_modules/` to global paths so `require` works properly in development --&gt;
      &lt;script&gt;
        require('module').globalPaths.push('&lt;%= htmlWebpackPlugin.options.nodeModules.replace(/\\/g, '\\\\') %&gt;')
      &lt;/script&gt;
    &lt;% } %&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id="app"&gt;&lt;/div&gt;
    &lt;!-- Set `__static` path to static files in production --&gt;
    &lt;script&gt;
      if (process.env.NODE_ENV !== 'development') window.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
    &lt;/script&gt;

    &lt;!-- webpack builds are automatically injected --&gt;
  &lt;/body&gt;
&lt;/html&gt;
</t>
<t tx="vitalije.20180207163515.5">/**
 * This file is used specifically and only for development. It installs
 * `electron-debug` &amp; `vue-devtools`. There shouldn't be any need to
 *  modify this file, but it can be used to extend your development
 *  environment.
 */

/* eslint-disable */

// Set environment for development
process.env.NODE_ENV = 'development'

// Install `electron-debug` with `devtron`
require('electron-debug')({ showDevTools: true })

// Install `vue-devtools`
require('electron').app.on('ready', () =&gt; {
  let installExtension = require('electron-devtools-installer')
  installExtension.default(installExtension.VUEJS_DEVTOOLS)
    .then(() =&gt; {})
    .catch(err =&gt; {
      console.log('Unable to install `vue-devtools`: \n', err)
    })
})

// Require `main` process to boot app
require('./index')
</t>
<t tx="vitalije.20180207163515.6">import { app, BrowserWindow } from 'electron'

/**
 * Set `__static` path to static files in production
 * https://simulatedgreg.gitbooks.io/electron-vue/content/en/using-static-assets.html
 */
if (process.env.NODE_ENV !== 'development') {
  global.__static = require('path').join(__dirname, '/static').replace(/\\/g, '\\\\')
}

let mainWindow
const winURL = process.env.NODE_ENV === 'development'
  ? `http://localhost:9080`
  : `file://${__dirname}/index.html`

function createWindow () {
  /**
   * Initial window options
   */
  mainWindow = new BrowserWindow({
    height: 563,
    useContentSize: true,
    width: 1000
  })

  mainWindow.loadURL(winURL)

  mainWindow.on('closed', () =&gt; {
    mainWindow = null
  })
}

app.on('ready', createWindow)

app.on('window-all-closed', () =&gt; {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () =&gt; {
  if (mainWindow === null) {
    createWindow()
  }
})

/**
 * Auto Updater
 *
 * Uncomment the following code below and install `electron-updater` to
 * support auto updating. Code Signing with a valid certificate is required.
 * https://simulatedgreg.gitbooks.io/electron-vue/content/en/using-electron-builder.html#auto-updating
 */

/*
import { autoUpdater } from 'electron-updater'

autoUpdater.on('update-downloaded', () =&gt; {
  autoUpdater.quitAndInstall()
})

app.on('ready', () =&gt; {
  if (process.env.NODE_ENV === 'production') autoUpdater.checkForUpdates()
})
 */
</t>
<t tx="vitalije.20180207163515.7">&lt;template&gt;
  &lt;div id="app"&gt;
    &lt;router-view&gt;&lt;/router-view&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default {
    name: 'leo-el-vue'
  }
&lt;/script&gt;

&lt;style&gt;
  /* CSS */
&lt;/style&gt;
</t>
<t tx="vitalije.20180207163515.8">&lt;template&gt;
  &lt;div id="wrapper"&gt;
    &lt;img id="logo" src="~@/assets/logo.png" alt="electron-vue"&gt;
    &lt;main&gt;
      &lt;div class="left-side"&gt;
        &lt;span class="title"&gt;
          Welcome to your new project!
        &lt;/span&gt;
        &lt;system-information&gt;&lt;/system-information&gt;
      &lt;/div&gt;

      &lt;div class="right-side"&gt;
        &lt;div class="doc"&gt;
          &lt;div class="title"&gt;Getting Started&lt;/div&gt;
          &lt;p&gt;
            electron-vue comes packed with detailed documentation that covers everything from
            internal configurations, using the project structure, building your application,
            and so much more.
          &lt;/p&gt;
          &lt;button @click="open('https://simulatedgreg.gitbooks.io/electron-vue/content/')"&gt;Read the Docs&lt;/button&gt;&lt;br&gt;&lt;br&gt;
        &lt;/div&gt;
        &lt;div class="doc"&gt;
          &lt;div class="title alt"&gt;Other Documentation&lt;/div&gt;
          &lt;button class="alt" @click="open('https://electron.atom.io/docs/')"&gt;Electron&lt;/button&gt;
          &lt;button class="alt" @click="open('https://vuejs.org/v2/guide/')"&gt;Vue.js&lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  import SystemInformation from './LandingPage/SystemInformation'

  export default {
    name: 'landing-page',
    components: { SystemInformation },
    methods: {
      open (link) {
        this.$electron.shell.openExternal(link)
      }
    }
  }
&lt;/script&gt;

&lt;style&gt;
  @import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro');

  * {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
  }

  body { font-family: 'Source Sans Pro', sans-serif; }

  #wrapper {
    background:
      radial-gradient(
        ellipse at top left,
        rgba(255, 255, 255, 1) 40%,
        rgba(229, 229, 229, .9) 100%
      );
    height: 100vh;
    padding: 60px 80px;
    width: 100vw;
  }

  #logo {
    height: auto;
    margin-bottom: 20px;
    width: 420px;
  }

  main {
    display: flex;
    justify-content: space-between;
  }

  main &gt; div { flex-basis: 50%; }

  .left-side {
    display: flex;
    flex-direction: column;
  }

  .welcome {
    color: #555;
    font-size: 23px;
    margin-bottom: 10px;
  }

  .title {
    color: #2c3e50;
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 6px;
  }

  .title.alt {
    font-size: 18px;
    margin-bottom: 10px;
  }

  .doc p {
    color: black;
    margin-bottom: 10px;
  }

  .doc button {
    font-size: .8em;
    cursor: pointer;
    outline: none;
    padding: 0.75em 2em;
    border-radius: 2em;
    display: inline-block;
    color: #fff;
    background-color: #4fc08d;
    transition: all 0.15s ease;
    box-sizing: border-box;
    border: 1px solid #4fc08d;
  }

  .doc button.alt {
    color: #42b983;
    background-color: transparent;
  }
&lt;/style&gt;
</t>
<t tx="vitalije.20180207163515.9">&lt;template&gt;
  &lt;div&gt;
    &lt;div class="title"&gt;Information&lt;/div&gt;
    &lt;div class="items"&gt;
      &lt;div class="item"&gt;
        &lt;div class="name"&gt;Path:&lt;/div&gt;
        &lt;div class="value"&gt;{{ path }}&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="item"&gt;
        &lt;div class="name"&gt;Route Name:&lt;/div&gt;
        &lt;div class="value"&gt;{{ name }}&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="item"&gt;
        &lt;div class="name"&gt;Vue.js:&lt;/div&gt;
        &lt;div class="value"&gt;{{ vue }}&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="item"&gt;
        &lt;div class="name"&gt;Electron:&lt;/div&gt;
        &lt;div class="value"&gt;{{ electron }}&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="item"&gt;
        &lt;div class="name"&gt;Node:&lt;/div&gt;
        &lt;div class="value"&gt;{{ node }}&lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="item"&gt;
        &lt;div class="name"&gt;Platform:&lt;/div&gt;
        &lt;div class="value"&gt;{{ platform }}&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
  export default {
    data () {
      return {
        electron: process.versions['atom-shell'],
        name: this.$route.name,
        node: process.versions.node,
        path: this.$route.path,
        platform: require('os').platform(),
        vue: require('vue/package.json').version
      }
    }
  }
&lt;/script&gt;

&lt;style scoped&gt;
  .title {
    color: #888;
    font-size: 18px;
    font-weight: initial;
    letter-spacing: .25px;
    margin-top: 10px;
  }

  .items { margin-top: 8px; }

  .item {
    display: flex;
    margin-bottom: 6px;
  }

  .item .name {
    color: #6a6a6a;
    margin-right: 6px;
  }

  .item .value {
    color: #35495e;
    font-weight: bold;
  }
&lt;/style&gt;
</t>
<t tx="vitalije.20180207164526.1">'use strict'

process.env.NODE_ENV = 'production'

const { say } = require('cfonts')
const chalk = require('chalk')
const del = require('del')
const { spawn } = require('child_process')
const webpack = require('webpack')
const Multispinner = require('multispinner')


const mainConfig = require('./webpack.main.config')
const rendererConfig = require('./webpack.renderer.config')
const webConfig = require('./webpack.web.config')

const doneLog = chalk.bgGreen.white(' DONE ') + ' '
const errorLog = chalk.bgRed.white(' ERROR ') + ' '
const okayLog = chalk.bgBlue.white(' OKAY ') + ' '
const isCI = process.env.CI || false

if (process.env.BUILD_TARGET === 'clean') clean()
else if (process.env.BUILD_TARGET === 'web') web()
else build()

function clean () {
  del.sync(['build/*', '!build/icons', '!build/icons/icon.*'])
  console.log(`\n${doneLog}\n`)
  process.exit()
}

function build () {
  greeting()

  del.sync(['dist/electron/*', '!.gitkeep'])

  const tasks = ['main', 'renderer']
  const m = new Multispinner(tasks, {
    preText: 'building',
    postText: 'process'
  })

  let results = ''

  m.on('success', () =&gt; {
    process.stdout.write('\x1B[2J\x1B[0f')
    console.log(`\n\n${results}`)
    console.log(`${okayLog}take it away ${chalk.yellow('`electron-builder`')}\n`)
    process.exit()
  })

  pack(mainConfig).then(result =&gt; {
    results += result + '\n\n'
    m.success('main')
  }).catch(err =&gt; {
    m.error('main')
    console.log(`\n  ${errorLog}failed to build main process`)
    console.error(`\n${err}\n`)
    process.exit(1)
  })

  pack(rendererConfig).then(result =&gt; {
    results += result + '\n\n'
    m.success('renderer')
  }).catch(err =&gt; {
    m.error('renderer')
    console.log(`\n  ${errorLog}failed to build renderer process`)
    console.error(`\n${err}\n`)
    process.exit(1)
  })
}

function pack (config) {
  return new Promise((resolve, reject) =&gt; {
    webpack(config, (err, stats) =&gt; {
      if (err) reject(err.stack || err)
      else if (stats.hasErrors()) {
        let err = ''

        stats.toString({
          chunks: false,
          colors: true
        })
        .split(/\r?\n/)
        .forEach(line =&gt; {
          err += `    ${line}\n`
        })

        reject(err)
      } else {
        resolve(stats.toString({
          chunks: false,
          colors: true
        }))
      }
    })
  })
}

function web () {
  del.sync(['dist/web/*', '!.gitkeep'])
  webpack(webConfig, (err, stats) =&gt; {
    if (err || stats.hasErrors()) console.log(err)

    console.log(stats.toString({
      chunks: false,
      colors: true
    }))

    process.exit()
  })
}

function greeting () {
  const cols = process.stdout.columns
  let text = ''

  if (cols &gt; 85) text = 'lets-build'
  else if (cols &gt; 60) text = 'lets-|build'
  else text = false

  if (text &amp;&amp; !isCI) {
    say(text, {
      colors: ['yellow'],
      font: 'simple3d',
      space: false
    })
  } else console.log(chalk.yellow.bold('\n  lets-build'))
  console.log()
}
</t>
<t tx="vitalije.20180207164526.2">const hotClient = require('webpack-hot-middleware/client?noInfo=true&amp;reload=true')

hotClient.subscribe(event =&gt; {
  /**
   * Reload browser when HTMLWebpackPlugin emits a new index.html
   *
   * Currently disabled until jantimon/html-webpack-plugin#680 is resolved.
   * https://github.com/SimulatedGREG/electron-vue/issues/437
   * https://github.com/jantimon/html-webpack-plugin/issues/680
   */
  // if (event.action === 'reload') {
  //   window.location.reload()
  // }

  /**
   * Notify `mainWindow` when `main` process is compiling,
   * giving notice for an expected reload of the `electron` process
   */
  if (event.action === 'compiling') {
    document.body.innerHTML += `
      &lt;style&gt;
        #dev-client {
          background: #4fc08d;
          border-radius: 4px;
          bottom: 20px;
          box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3);
          color: #fff;
          font-family: 'Source Sans Pro', sans-serif;
          left: 20px;
          padding: 8px 12px;
          position: absolute;
        }
      &lt;/style&gt;

      &lt;div id="dev-client"&gt;
        Compiling Main Process...
      &lt;/div&gt;
    `
  }
})
</t>
<t tx="vitalije.20180207164526.3">'use strict'

const chalk = require('chalk')
const electron = require('electron')
const path = require('path')
const { say } = require('cfonts')
const { spawn } = require('child_process')
const webpack = require('webpack')
const WebpackDevServer = require('webpack-dev-server')
const webpackHotMiddleware = require('webpack-hot-middleware')

const mainConfig = require('./webpack.main.config')
const rendererConfig = require('./webpack.renderer.config')

let electronProcess = null
let manualRestart = false
let hotMiddleware

function logStats (proc, data) {
  let log = ''

  log += chalk.yellow.bold(`┏ ${proc} Process ${new Array((19 - proc.length) + 1).join('-')}`)
  log += '\n\n'

  if (typeof data === 'object') {
    data.toString({
      colors: true,
      chunks: false
    }).split(/\r?\n/).forEach(line =&gt; {
      log += '  ' + line + '\n'
    })
  } else {
    log += `  ${data}\n`
  }

  log += '\n' + chalk.yellow.bold(`┗ ${new Array(28 + 1).join('-')}`) + '\n'

  console.log(log)
}

function startRenderer () {
  return new Promise((resolve, reject) =&gt; {
    rendererConfig.entry.renderer = [path.join(__dirname, 'dev-client')].concat(rendererConfig.entry.renderer)

    const compiler = webpack(rendererConfig)
    hotMiddleware = webpackHotMiddleware(compiler, { 
      log: false, 
      heartbeat: 2500 
    })

    compiler.plugin('compilation', compilation =&gt; {
      compilation.plugin('html-webpack-plugin-after-emit', (data, cb) =&gt; {
        hotMiddleware.publish({ action: 'reload' })
        cb()
      })
    })

    compiler.plugin('done', stats =&gt; {
      logStats('Renderer', stats)
    })

    const server = new WebpackDevServer(
      compiler,
      {
        contentBase: path.join(__dirname, '../'),
        quiet: true,
        before (app, ctx) {
          app.use(hotMiddleware)
          ctx.middleware.waitUntilValid(() =&gt; {
            resolve()
          })
        }
      }
    )

    server.listen(9080)
  })
}

function startMain () {
  return new Promise((resolve, reject) =&gt; {
    mainConfig.entry.main = [path.join(__dirname, '../src/main/index.dev.js')].concat(mainConfig.entry.main)

    const compiler = webpack(mainConfig)

    compiler.plugin('watch-run', (compilation, done) =&gt; {
      logStats('Main', chalk.white.bold('compiling...'))
      hotMiddleware.publish({ action: 'compiling' })
      done()
    })

    compiler.watch({}, (err, stats) =&gt; {
      if (err) {
        console.log(err)
        return
      }

      logStats('Main', stats)

      if (electronProcess &amp;&amp; electronProcess.kill) {
        manualRestart = true
        process.kill(electronProcess.pid)
        electronProcess = null
        startElectron()

        setTimeout(() =&gt; {
          manualRestart = false
        }, 5000)
      }

      resolve()
    })
  })
}

function startElectron () {
  electronProcess = spawn(electron, ['--inspect=5858', path.join(__dirname, '../dist/electron/main.js')])

  electronProcess.stdout.on('data', data =&gt; {
    electronLog(data, 'blue')
  })
  electronProcess.stderr.on('data', data =&gt; {
    electronLog(data, 'red')
  })

  electronProcess.on('close', () =&gt; {
    if (!manualRestart) process.exit()
  })
}

function electronLog (data, color) {
  let log = ''
  data = data.toString().split(/\r?\n/)
  data.forEach(line =&gt; {
    log += `  ${line}\n`
  })
  if (/[0-9A-z]+/.test(log)) {
    console.log(
      chalk[color].bold('┏ Electron -------------------') +
      '\n\n' +
      log +
      chalk[color].bold('┗ ----------------------------') +
      '\n'
    )
  }
}

function greeting () {
  const cols = process.stdout.columns
  let text = ''

  if (cols &gt; 104) text = 'electron-vue'
  else if (cols &gt; 76) text = 'electron-|vue'
  else text = false

  if (text) {
    say(text, {
      colors: ['yellow'],
      font: 'simple3d',
      space: false
    })
  } else console.log(chalk.yellow.bold('\n  electron-vue'))
  console.log(chalk.blue('  getting ready...') + '\n')
}

function init () {
  greeting()

  Promise.all([startRenderer(), startMain()])
    .then(() =&gt; {
      startElectron()
    })
    .catch(err =&gt; {
      console.error(err)
    })
}

init()
</t>
<t tx="vitalije.20180207164526.4">'use strict'

process.env.BABEL_ENV = 'main'

const path = require('path')
const { dependencies } = require('../package.json')
const webpack = require('webpack')

const BabiliWebpackPlugin = require('babili-webpack-plugin')
//const BabiliWebpackPlugin = require('babel-preset-minify')

let mainConfig = {
  entry: {
    main: path.join(__dirname, '../src/main/index.js')
  },
  externals: [
    ...Object.keys(dependencies || {})
  ],
  module: {
    rules: [
      {
        test: /\.js$/,
        use: 'babel-loader',
        exclude: /node_modules/
      },
      {
        test: /\.node$/,
        use: 'node-loader'
      },
      {
        test: /\.coffee$/,
        loader: 'coffee-loader',
        options: {
            bare: true
        }
      },
    ]
  },
  node: {
    __dirname: process.env.NODE_ENV !== 'production',
    __filename: process.env.NODE_ENV !== 'production'
  },
  output: {
    filename: '[name].js',
    libraryTarget: 'commonjs2',
    path: path.join(__dirname, '../dist/electron')
  },
  plugins: [
    new webpack.NoEmitOnErrorsPlugin()
  ],
  resolve: {
    extensions: ['.js', '.json', '.node']
  },
  target: 'electron-main'
}

/**
 * Adjust mainConfig for development settings
 */
if (process.env.NODE_ENV !== 'production') {
  mainConfig.plugins.push(
    new webpack.DefinePlugin({
      '__static': `"${path.join(__dirname, '../static').replace(/\\/g, '\\\\')}"`
    })
  )
}

/**
 * Adjust mainConfig for production settings
 */
if (process.env.NODE_ENV === 'production') {
  mainConfig.plugins.push(
    new BabiliWebpackPlugin(),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': '"production"'
    })
  )
}

module.exports = mainConfig
</t>
<t tx="vitalije.20180207164526.5">'use strict'

process.env.BABEL_ENV = 'renderer'

const path = require('path')
const { dependencies } = require('../package.json')
const webpack = require('webpack')

const BabiliWebpackPlugin = require('babili-webpack-plugin')
//const BabiliWebpackPlugin = require('babel-preset-minify')
const CopyWebpackPlugin = require('copy-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')

/**
 * List of node_modules to include in webpack bundle
 *
 * Required for specific packages like Vue UI libraries
 * that provide pure *.vue files that need compiling
 * https://simulatedgreg.gitbooks.io/electron-vue/content/en/webpack-configurations.html#white-listing-externals
 */
let whiteListedModules = ['vue']

let rendererConfig = {
  devtool: '#cheap-module-eval-source-map',
  entry: {
    renderer: path.join(__dirname, '../src/renderer/main.js')
  },
  externals: [
    ...Object.keys(dependencies || {}).filter(d =&gt; !whiteListedModules.includes(d))
  ],
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: 'css-loader'
        })
      },
      {
        test: /\.html$/,
        use: 'vue-html-loader'
      },
      {
        test: /\.js$/,
        use: 'babel-loader',
        exclude: /node_modules/
      },
      {
        test: /\.node$/,
        use: 'node-loader'
      },
      {
        test: /\.coffee$/,
        loader: 'coffee-loader',
        options: {
            bare: true
        }
      },
      {
        test: /\.vue$/,
        use: {
          loader: 'vue-loader',
          options: {
            extractCSS: process.env.NODE_ENV === 'production',
            loaders: {
              sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax=1',
              scss: 'vue-style-loader!css-loader!sass-loader'
            }
          }
        }
      },
      {
        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
        use: {
          loader: 'url-loader',
          query: {
            limit: 10000,
            name: 'imgs/[name]--[folder].[ext]'
          }
        }
      },
      {
        test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
        loader: 'url-loader',
        options: {
          limit: 10000,
          name: 'media/[name]--[folder].[ext]'
        }
      },
      {
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        use: {
          loader: 'url-loader',
          query: {
            limit: 10000,
            name: 'fonts/[name]--[folder].[ext]'
          }
        }
      }
    ]
  },
  node: {
    __dirname: process.env.NODE_ENV !== 'production',
    __filename: process.env.NODE_ENV !== 'production'
  },
  plugins: [
    new ExtractTextPlugin('styles.css'),
    new HtmlWebpackPlugin({
      filename: 'index.html',
      template: path.resolve(__dirname, '../src/index.ejs'),
      minify: {
        collapseWhitespace: true,
        removeAttributeQuotes: true,
        removeComments: true
      },
      nodeModules: process.env.NODE_ENV !== 'production'
        ? path.resolve(__dirname, '../node_modules')
        : false
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  ],
  output: {
    filename: '[name].js',
    libraryTarget: 'commonjs2',
    path: path.join(__dirname, '../dist/electron')
  },
  resolve: {
    alias: {
      '@': path.join(__dirname, '../src/renderer'),
      'vue$': 'vue/dist/vue.esm.js'
    },
    extensions: ['.js', '.vue', '.json', '.css', '.node']
  },
  target: 'electron-renderer'
}

/**
 * Adjust rendererConfig for development settings
 */
if (process.env.NODE_ENV !== 'production') {
  rendererConfig.plugins.push(
    new webpack.DefinePlugin({
      '__static': `"${path.join(__dirname, '../static').replace(/\\/g, '\\\\')}"`
    })
  )
}

/**
 * Adjust rendererConfig for production settings
 */
if (process.env.NODE_ENV === 'production') {
  rendererConfig.devtool = ''

  rendererConfig.plugins.push(
    new BabiliWebpackPlugin(),
    new CopyWebpackPlugin([
      {
        from: path.join(__dirname, '../static'),
        to: path.join(__dirname, '../dist/electron/static'),
        ignore: ['.*']
      }
    ]),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': '"production"'
    }),
    new webpack.LoaderOptionsPlugin({
      minimize: true
    })
  )
}

module.exports = rendererConfig
</t>
<t tx="vitalije.20180207164526.6">'use strict'

process.env.BABEL_ENV = 'web'

const path = require('path')
const webpack = require('webpack')

const BabiliWebpackPlugin = require('babili-webpack-plugin')
//const BabiliWebpackPlugin = require('babel-preset-minify')
const CopyWebpackPlugin = require('copy-webpack-plugin')
const ExtractTextPlugin = require('extract-text-webpack-plugin')
const HtmlWebpackPlugin = require('html-webpack-plugin')

let webConfig = {
  devtool: '#cheap-module-eval-source-map',
  entry: {
    web: path.join(__dirname, '../src/renderer/main.js')
  },
  module: {
    rules: [
      {
        test: /\.css$/,
        use: ExtractTextPlugin.extract({
          fallback: 'style-loader',
          use: 'css-loader'
        })
      },
      {
        test: /\.html$/,
        use: 'vue-html-loader'
      },
      {
        test: /\.js$/,
        use: 'babel-loader',
        include: [ path.resolve(__dirname, '../src/renderer') ],
        exclude: /node_modules/
      },
      {
        test: /\.coffee$/,
        loader: 'coffee-loader',
        options: {
            bare: true
        }
      },
      {
        test: /\.vue$/,
        use: {
          loader: 'vue-loader',
          options: {
            extractCSS: true,
            loaders: {
              sass: 'vue-style-loader!css-loader!sass-loader?indentedSyntax=1',
              scss: 'vue-style-loader!css-loader!sass-loader'
            }
          }
        }
      },
      {
        test: /\.(png|jpe?g|gif|svg)(\?.*)?$/,
        use: {
          loader: 'url-loader',
          query: {
            limit: 10000,
            name: 'imgs/[name].[ext]'
          }
        }
      },
      {
        test: /\.(woff2?|eot|ttf|otf)(\?.*)?$/,
        use: {
          loader: 'url-loader',
          query: {
            limit: 10000,
            name: 'fonts/[name].[ext]'
          }
        }
      }
    ]
  },
  plugins: [
    new ExtractTextPlugin('styles.css'),
    new HtmlWebpackPlugin({
      filename: 'index.html',
      template: path.resolve(__dirname, '../src/index.ejs'),
      minify: {
        collapseWhitespace: true,
        removeAttributeQuotes: true,
        removeComments: true
      },
      nodeModules: false
    }),
    new webpack.DefinePlugin({
      'process.env.IS_WEB': 'true'
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  ],
  output: {
    filename: '[name].js',
    path: path.join(__dirname, '../dist/web')
  },
  resolve: {
    alias: {
      '@': path.join(__dirname, '../src/renderer'),
      'vue$': 'vue/dist/vue.esm.js'
    },
    extensions: ['.js', '.vue', '.json', '.css']
  },
  target: 'web',
}

/**
 * Adjust webConfig for production settings
 */
if (process.env.NODE_ENV === 'production') {
  webConfig.devtool = ''
  webConfig.plugins.push(
    new BabiliWebpackPlugin(),
    new CopyWebpackPlugin([
      {
        from: path.join(__dirname, '../static'),
        to: path.join(__dirname, '../dist/web/static'),
        ignore: ['.*']
      }
    ]),
    new webpack.DefinePlugin({
      'process.env.NODE_ENV': '"production"'
    }),
    new webpack.LoaderOptionsPlugin({
      minimize: true
    })
  )
}

module.exports = webConfig
</t>
<t tx="vitalije.20180208154540.1">I have just created new vue project using command

```
    vue init simulatedgreg/electron-vue leo-el-vue
```

and imported it into Leo outline. After initialization of this
template project, I have adjusted build configuration just a little bit
to add support for coffeescript.

Files that are strictly Leo related are following this node.

All other files that were generated by initialization script are hidden
under 'boilerplate code bellow' headline. Some of these files are slightly
changed to incorporate new Leo files. To understand how Leo-Electron-Vue
application works one usually dosen't need to look in those files.

Vitalije</t>
<t tx="vitalije.20180208155118.1"></t>
<t tx="vitalije.20180208155138.1">@others
</t>
<t tx="vitalije.20180208155254.1">@language pug
&lt;template lang="pug"&gt;
.leo-window
    .tree-wrap
        canvas#tree(v-on:mousedown="clickOutline",
                    :height="treeHeight",
                    :width="treeWidth")
    .body-editor
        textarea(v-model="body")
&lt;/template&gt;

</t>
<t tx="vitalije.20180208155259.1">@language coffeescript
&lt;script lang="coffee"&gt;
@others
&lt;/script&gt;
</t>
<t tx="vitalije.20180208155304.1">@language css
&lt;style&gt;
body {
    background-color: #113333;
}
.leo-window {
    background-color: #113333;
    display:flex;
    overflow-y:hidden;
}
.leo-window .tree-wrap {
    width: 300px;
}
#tree {
    position:fixed;
    left:0;
    top:0px;
    width: 300px;
    height: 530px;
    overflow-x: auto;
    background: #071717;
}
.leo-window .body-editor {
    flex-grow:1;
    flex: 1 1 auto;
}
.CodeMirror {
    font-size: 20px;
    flex: 1 1 auto;
}
&lt;/style&gt;

</t>
<t tx="vitalije.20180208201410.1">data: -&gt; {
    treeWidth: 300
    treeHeight: window.innerHeight - 1
    mode: 'javascript'
    theme: 'elegant'
    treeSkip: 0
    treeCount: 40
    editorOptions: {
        tabSize: 8
    }
    @others
}

</t>
<t tx="vitalije.20180208201416.1">computed:
    tree_body_ratio: -&gt;
        (@treeWidth / (window.innerWidth - 20) * 100).toFixed(2)
    tree_percent_width: -&gt; "width: #{@tree_body_ratio}%;"
    body_percent_width: -&gt;"width: #{100 - @tree_body_ratio}%;"
    visIndexes: -&gt;
        leodraw.visibleIndexes @leoData, @treeSkip, @treeCount
    leoData: -&gt;
        @$store.state.leo
    selectedIndex: -&gt;
        @$store.state.leo.selectedIndex
    languageMode: -&gt;
        mode = leodata.language @leoData, @selectedIndex
    body: -&gt;
        leodata.getBody @leoData, @selectedIndex
    dirty: -&gt;
        @leoData.dirty
    marks: -&gt;
        @leoData.marks</t>
<t tx="vitalije.20180208201424.1">methods:
    clickOutline: (e) -&gt;
        row = (e.offsetY - 17) // 17
        vi = @visIndexes
        si = vi[row]
        lev = @leoData.levels[si]
        x2 = lev * 28
        if x2 - 28 &lt;= e.offsetX &lt;= x2
            @$store.commit('TOGGLE_NODE', si)
        else
            @$store.commit('SELECT_INDEX', si)

    bodyKeyDown: (e) -&gt;
        console.log e

</t>
<t tx="vitalije.20180208201429.1">mounted: -&gt;
    self = this
    @$store.dispatch('loadLeoFile', 'leo-el-vue.leo')
    t = document.getElementById('tree')
    t.style.height = @treeHeight + 'px'
    a = @$el.querySelector('.body-editor textarea')
    console.log a
    @cminst = CodeMirror.fromTextArea a,
        lineNumbers: true
        mode: 'javascript'
        theme: 'midnight'
    cm = @$el.querySelector('.CodeMirror')
    cm.style.height = (@treeHeight - 15) + 'px'
    cm.style.maxWidth = (window.innerWidth - 20 - @treeWidth) + 'px'
    store = @$store
    @cminst.on 'change', (e, ch) -&gt;
        return if ch.origin is 'setValue'
        b = e.getValue()
        store.commit 'SET_BODY', b

watch:
    body: (val, oldval) -&gt;
        if @cminst.getValue() != val
            @cminst.setValue val

    visIndexes: (val, oldval) -&gt;
        leodraw.showTree @leoData, val

    selectedIndex: -&gt;
        leodraw.showTree @leoData, @visIndexes
    dirty: -&gt;
        leodraw.showTree @leoData, @visIndexes
    marks: -&gt;
        leodraw.showTree @leoData, @visIndexes
    languageMode: (val) -&gt;
        console.log val, 'mode'
        @cminst.setOption 'mode', val</t>
<t tx="vitalije.20180208201446.1">themes: '3024-day
        3024-night
        abcdef
        ambiance
        ambiance-mobile
        base16-dark
        base16-light
        bespin
        blackboard
        cobalt
        colorforth
        dracula
        duotone-dark
        duotone-light
        eclipse
        elegant
        erlang-dark
        hopscotch
        icecoder
        isotope
        lesser-dark
        liquibyte
        material
        mbo
        mdn-like
        midnight
        monokai
        neat
        neo
        night
        oceanic-next
        panda-syntax
        paraiso-dark
        paraiso-light
        pastel-on-dark
        railscasts
        rubyblue
        seti
        shadowfox
        solarized
        the-matrix
        tomorrow-night-bright
        tomorrow-night-eighties
        ttcn
        twilight
        vibrant-ink
        xq-dark
        xq-light
        yeti
        zenburn'.split(' ')

</t>
<t tx="vitalije.20180208210204.1">@language coffeescript
electron = require('electron')
fs = electron.remote.require('fs')
ROOTGNX = 'hidden-root-vnode-gnx'
@others
export default {
    getData
    treeItemData
    getBody
    language
    computeIcon
}

</t>
<t tx="vitalije.20180208211609.1">get_bodies = (doc) -&gt;
    res = {}
    f = (t) -&gt; res[t.getAttribute('tx')] = t.textContent
    doc.querySelectorAll('leo_file&gt;tnodes t').forEach f
    res

</t>
<t tx="vitalije.20180208211614.1">get_heads = (doc) -&gt;
    res = {}
    nonClonedNodes doc,
        (v) -&gt;
            res[v.getAttribute('t')] = v.firstChild.textContent
    res

</t>
<t tx="vitalije.20180208211855.1">loadfile = (fname) -&gt;
    parser = new DOMParser()
    parser.parseFromString(fs.readFileSync(fname, 'utf8'), 'text/xml')

loadfileAsync = (fname) -&gt;
    new Promise (res, rej) -&gt;
        fs.readFile fname, 'utf8', (err, data) -&gt;
            return rej(err) if err
            parser = new DOMParser()
            res parser.parseFromString(data, 'text/xml')
</t>
<t tx="vitalije.20180208213711.1">nonClonedNodes = (doc, f) -&gt;
    doc.querySelectorAll('leo_file&gt;vnodes v').forEach (v) -&gt;
        f(v) if v.firstChild?

</t>
<t tx="vitalije.20180208214043.1">get_children = (doc) -&gt;
    res = {}
    toplevels = []
    res[ROOTGNX] = toplevels
    doc.querySelectorAll('leo_file&gt;vnodes&gt;v').forEach (v) -&gt;
        toplevels.push v.getAttribute('t')
    nonClonedNodes doc,
        (v) -&gt;
            cs = []
            [].forEach.apply(v.children, [
                (v2, i) -&gt;
                    if i &gt; 0
                        cs.push v2.getAttribute('t')])
            res[v.getAttribute('t')] = cs
    res

</t>
<t tx="vitalije.20180208214737.1">get_indexes = (doc, children) -&gt;
    res =
        l: []
        r: []
        g: []
        push: (a) -&gt;
            @l.push a[0]
            @r.push a[1]
            @g.push a[2]
            @l.length - 1
        forEach: (f) -&gt;
            {l,r,g} = this
            l.forEach (_l, i) -&gt;
                f([_l, r[i], g[i]], i)

    do_index_node = (lft, gnx) -&gt;
        childs = children[gnx]
        if childs.length &gt; 0
            i = res.push [lft, 0, gnx]
            rgt = do_index_list_of_nodes lft + 1, childs
            res.r[i] = rgt
            return rgt
        else
            res.push [lft, lft + 1, gnx]
            return lft + 1
    do_index_list_of_nodes = (lft, childs) -&gt;
        m = {lft}
        childs.forEach (v) -&gt;
            m.lft = 1 + do_index_node m.lft, v
        m.lft
    do_index_node 0, ROOTGNX
    res

</t>
<t tx="vitalije.20180208222827.1">get_levels = (indexes) -&gt;
    m = {lev: 0}
    res = [0]
    indexes.forEach ([l, r, gnx], i) -&gt;
        if i is 0
            m.last = [l, r, gnx]
        else
            if l is m.last[0] + 1
                m.lev++
                res.push m.lev
            else
                dl = m.last[1] - l + 1
                m.lev += dl
                res.push m.lev
            m.last = [l, r, gnx]

    res

</t>
<t tx="vitalije.20180208230944.1">get_parents = (indexes) -&gt;
    acc = []
    stack = [0]
    indexes.forEach ([l, r, gnx], i) -&gt;
        if i is 0
            acc.push -1
        else
            par = stack[0]
            while l &gt; indexes.r[par]
                stack.shift()
                par = stack[0]
            acc.push par
            if r - l &gt; 1
                stack.unshift i
    acc
get_parents2 = (levels) -&gt;
    acc = [0]
    stack = [0]
    i = 1
    lev0 = 0
    while i &lt; levels.length
        par = stack[stack.length - 1]
        lev1 = levels[i]
        inclev = lev1 &gt; lev0
        samelev = lev1 is lev0
        switch
            when inclev
                acc.push i
                stack.push i
            when samelev
                acc.push stack[lev0]
            else
                acc.push stack[lev1 - 1]
                stack.splice(lev1, stack.length, i)
        lev0 = lev1
        i += 1
    acc

</t>
<t tx="vitalije.20180209083523.1">get_parent_gnxes = (indexes, parents) -&gt;
    res = {}
    add = (gnx, pari) -&gt;
        res[gnx] ?= []
        res[gnx].push indexes.g[pari]
    indexes.g.forEach (gnx, i) -&gt;
        add gnx, parents[i]
    res</t>
<t tx="vitalije.20180209084406.1">@language coffeescript
import leodata from './leodata.coffee'
treeItemData = leodata.treeItemData
ROOTGNX = 'hidden-root-vnode-gnx'
@others
window.di = (ldata, items) -&gt;
    showTree ldata, items

showTree = (ldata, items) -&gt;
    canv = document.getElementById('tree')
    h = canv.offsetHeight
    canv.height = h
    ctx = canv.getContext('2d')
    drawTree_visible ctx, ldata, items, 0, 17

export default {
    drawIcon
    showTree
    visibleIndexes
}</t>
<t tx="vitalije.20180209090023.1">drawIcon = (n, ctx, x, y, sz) -&gt;
    w = sz * 35
    h = sz * 15
    h1 = h / 3
    sw = sz
    sw2 = sw / 2
    ctx.lineWidth = sw
    ctx.strokeStyle = if n &amp; 8 then 'black' else '#77ffff'
    ctx.clearRect x, y, w, h
    ctx.fillStyle = '#80b0b0'
    ctx.fillRect x - sw, y - sw, w + 2 * sw, h + 2 * sw
    ctx.strokeRect x + sw2, y + sw2, w - sw, h - sw
    if n &amp; 1
        ctx.strokeStyle = '#1111ff'
        ctx.strokeRect x + 0.66 * w, y + h1, h1, h1
    if n &amp; 2
        ctx.strokeStyle = '#ff0000'
        ctx.strokeRect x + w / 2 - sw, y + 2 * sw, sw, h - 4 * sw
    if n &amp; 4
        ctx.strokeStyle = '#ff000'
        ctx.lineWidth = sw2
        ctx.beginPath()
        ctx.arc x + 0.25 * w, y + h / 2, 0.2 * h, -1.5, 3.4
        ctx.lineTo x + w * 0.25,  y + h * 0.25
        ctx.lineTo x + w * 0.37,  y + h * 0.25
        ctx.stroke()</t>
<t tx="vitalije.20180209090713.1">drawPlusMinus = (ctx, x, y, exp, selected) -&gt;
    xa = x - 20
    ctx.lineWidth = 1
    ctx.strokeStyle = if selected then '#ffffce' else '#c7c7c7'
    ctx.strokeRect xa, y, 12, 12
    ctx.strokeRect xa + 3, y + 6, 6, 1
    if not exp
        ctx.strokeRect xa + 6, y + 3, 1, 6
</t>
<t tx="vitalije.20180209091505.1">_drawTreeItem = (ctx, x, y, h, lev, dy, icnum, leaf, exp, selected) -&gt;
    xa = x + 28 * lev - 5
    if selected
        ctx.fillStyle = '#336699'
        ctx.fillRect 0, y - 5, 1024, dy
        ctx.fillStyle = '#ffffce'
    else
        ctx.fillStyle = '#E7E7c7'
    ctx.font = '12pt DejaVu Sans Mono'
    ctx.fillText h, 28 * lev + x + 35, y + 0.5 * dy
    drawIcon icnum, ctx, xa, y, 0.8
    if not leaf
        drawPlusMinus ctx, xa, y, exp, selected

drawTreeItem = (ctx, x, y, dy, ldata, i) -&gt;
    [h, lev, icnum, leaf, exp] = treeItemData ldata, i
    selected = ldata.selectedIndex is i
    _drawTreeItem ctx, x, y, h, lev, dy, icnum, leaf, exp, selected</t>
<t tx="vitalije.20180209091521.1">treeItemData = (ldata, i) -&gt;
    {indexes, expanded, heads, levels, bodies, marks, pgnxes} = ldata
    gnx = indexes.g[i]
    h = heads[gnx]
    lev = levels[i]
    exp = expanded[i]
    icnum = computeIcon ldata, i
    leaf = indexes.r[i] - indexes.l[i] is 1
    [h, lev, icnum, leaf, exp]
</t>
<t tx="vitalije.20180209093557.1">computeIcon = (ldata, i) -&gt;
    gnx = ldata.indexes.g[i]
    n = if ldata.bodies[gnx].length then 1 else 0
    n += if ldata.marks[gnx] then 2 else 0
    n += if ldata.pgnxes[gnx].length &gt; 1 then 4 else 0
    if ldata.dirty[gnx] then n + 8 else n</t>
<t tx="vitalije.20180209093605.1">getBody = (ldata, i) -&gt;
    gnx = ldata.indexes.g[i]
    ldata.bodies[gnx] ? ''</t>
<t tx="vitalije.20180209094521.1">allParentIndexes = (ldata, i) -&gt;
    parents = ldata.parents
    res = []
    return res unless parents.length
    while i != 0
        i = parents[i]
        res.push i
    res

areAllParentsExpanded = (ldata, i) -&gt;
    f = (j) -&gt; (j is 0) or ldata.expanded[j]
    allParentIndexes(ldata, i).every f

isItemVisible = (ldata, i) -&gt;
    i &gt; 0 and areAllParentsExpanded(ldata, i)

visibleIndexes = (ldata, skip, count) -&gt;
    res = []
    for i in [1...ldata.levels.length]
        if isItemVisible(ldata, i)
            if skip
                skip--
            else
                res.push i
                count--
                break unless count
    res</t>
<t tx="vitalije.20180209100020.1">drawTree = (ctx, ldata, skip, count, x, dy) -&gt;
    items = visibleIndexes(ldata, skip, count)
    drawTree_visible ctx, ldata, items, x, dy

</t>
<t tx="vitalije.20180209130310.1">export default {
    name: 'leo-editor'
    @others
}</t>
<t tx="vitalije.20180209130332.1">import leodata from '../leodata.coffee'
import leodraw from '../leodraw.coffee'
# basic imports
import CodeMirror from 'codemirror'
import 'codemirror/lib/codemirror.css'

# modes
import 'codemirror/mode/javascript/javascript.js'
import 'codemirror/mode/coffeescript/coffeescript.js'
import 'codemirror/mode/python/python.js'
import 'codemirror/mode/clike/clike.js'
import 'codemirror/mode/clojure/clojure.js'
import 'codemirror/mode/css/css.js'
import 'codemirror/mode/sass/sass.js'
import 'codemirror/mode/markdown/markdown.js'
import 'codemirror/mode/pug/pug.js'

# themes
import 'codemirror/theme/midnight.css'</t>
<t tx="vitalije.20180209132234.1">language = (ldata, i) -&gt;
    return 'javascript' unless ldata.doc and i &gt; 0
    rx = /^@language\s+(\w+)$/m
    m = rx.exec(getBody(ldata, i))
    while not m and ldata.parents[i] != 0
        i = ldata.parents[i]
        m = rx.exec getBody(ldata, i)
    return 'javascript' unless m
    if ['javascript', 'coffeescript', 'python', 'markdown', 'clojure',
        'css', 'sass', 'pug'].includes(m[1])
        return m[1]
    switch m[1]
        when 'clojurescript' then 'clojure'
        when 'java' then 'clike'
        else 'javascript'</t>
<t tx="vitalije.20180209132238.1">updateBody = (ldata, i, b, j) -&gt;
    g1 = ldata.indexes.g[i]
    g2 = ldata.indexes.g[j]
    if g1?
        _b = ldata.bodies[g1]
        ldata.bodies[g1] = b
        ldata.dirty[g1] or= _b isnt b
    ldata.bodies[g2]</t>
<t tx="vitalije.20180209132245.1">getData = (fname, a_sync) -&gt;
    if a_sync
        loadfileAsync(fname).then (doc) -&gt;
            getDataFromDoc(doc)
    else
        doc = loadfile fname

getDataFromDoc = (doc) -&gt;
    bodies = get_bodies(doc)
    heads = get_heads(doc)
    children = get_children(doc)
    indexes = get_indexes(doc, children)
    levels = get_levels(indexes)
    expanded = levels.map (lev) -&gt; lev is 0
    parents = get_parents indexes
    pgnxes = get_parent_gnxes indexes, parents
    marks = {}
    dirty = {}
    {
        bodies
        heads
        children
        indexes
        levels
        expanded
        parents
        pgnxes
        marks
        dirty
        doc
        selectedIndex: -1
    }</t>
<t tx="vitalije.20180209141906.1">import leodata from '../../leodata.coffee'
@others
export default {
  state,
  mutations,
  actions
}
</t>
<t tx="vitalije.20180209152240.1">drawTree_visible = (ctx, ldata, items, x, dy) -&gt;
    y0 = dy
    W = ctx.canvas.width
    H = ctx.canvas.height
    ctx.clearRect 0, 0, W, H
    items.forEach (i, j) -&gt;
        drawTreeItem ctx, x, y0 + j * dy, dy, ldata, i
    items</t>
<t tx="vitalije.20180209174419.1"></t>
<t tx="vitalije.20180209180701.1">state = {
    indexes:
        l: []
        r: []
        g: []
    bodies: {}
    heads: {}
    children: {}
    parents:[]
    pgnxes: {}
    expanded: []
    levels: []
    marks: []
    dirty: {}
    doc: null
    fname: ''
    selectedIndex: -1
}</t>
<t tx="vitalije.20180209180738.1">mutations = {
    @others
}</t>
<t tx="vitalije.20180209180800.1">actions = {
    loadLeoFile: ({ commit }, fname) -&gt;
        leodata.getData(fname, true).then (ldata) -&gt;
            commit('LOAD_LEO_FILE', {fname, ldata})
}</t>
<t tx="vitalije.20180209180825.1">LOAD_LEO_FILE: (state, {fname, ldata}) -&gt;
    Object.assign state, {...ldata, fname}</t>
<t tx="vitalije.20180209180830.1">SELECT_INDEX: (state, i) -&gt;
    state.selectedIndex = i</t>
<t tx="vitalije.20180209180833.1">TOGGLE_NODE: (state, i) -&gt;
    e = state.expanded.slice()
    e[i] = not e[i]
    state.expanded = e</t>
<t tx="vitalije.20180209180837.1">TOGGLE_MARKED_NODE: (state, i) -&gt;
    e = {...state.marks}
    g = state.indexes.g[i]
    e[g] = not e[g]
    state.marks = e</t>
<t tx="vitalije.20180209180841.1">SET_BODY: (state, b) -&gt;
    g = state.indexes.g[state.selectedIndex]
    if g and b isnt state.bodies[g]
        state.bodies = {...state.bodies}
        state.bodies[g] = b
        unless state.dirty[g]
            state.dirty = {...state.dirty}
            state.dirty[g] = true</t>
</tnodes>
</leo_file>
